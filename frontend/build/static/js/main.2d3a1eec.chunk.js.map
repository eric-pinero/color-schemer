{"version":3,"sources":["components/SchemeSwatch.js","components/ColorSchemeView.js","functions/ComplementaryColors.js","components/ColorDropdown.js","components/ColorList.js","components/Interface.js","App.js","serviceWorker.js","index.js"],"names":["SchemeSwatch","paint","complement","scheme","schemeChange","className","name","style","background","rgba","join","ColorSchemeView","schemeView","length","map","complementLocator","color","colorList","closestComplement","trueComplement","i","element","complementCalculator","slice","leastDelta","rgb","delta","Math","abs","ColorDropdown","list","paints","rgbaString","dot","border","height","width","borderRadius","marginLeft","isMulti","options","closeMenuOnSelect","onChange","selected","change","selection","value","ColorList","useState","Interface","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d3a1eec.chunk.js","sourcesContent":["import React from \"react\"\n\nconst SchemeSwatch = ({paint, scheme, schemeChange}) => {\n    const complement = paint.complement\n    // const swatchIndex = scheme.indexOf(paint)\n\n    // function removeSwatch(){\n    //     const newScheme = scheme\n    //     newScheme.splice(swatchIndex, 1)\n    //     schemeChange([...newScheme])\n    // }\n    return(\n            <div className=\"flex align-center justify-center w-100percent margin-bottom-10\">\n                <p className=\"w-200\">Color: {paint.name}</p>\n                <div className=\"light-shadow flex\">\n                    <div className=\"box-100\" style= {{background: `rgba(${paint.rgba.join(\",\")})`}}/>\n                    <div className=\"box-100\" style= {{background: `rgba(${complement.rgba.join(\",\")})`}}/>\n                </div>\n                <p className=\"w-200\">Complement: {complement.name}</p>\n                {/* <button onClick={() => removeSwatch()}>Remove</button> */}\n            </div>\n    );\n};\n\nexport default SchemeSwatch","import React from \"react\"\nimport SchemeSwatch from \"./SchemeSwatch\"\n\n\nconst ColorSchemeView = ({scheme, schemeChange}) => {\n    let schemeView = scheme.length ?\n        scheme.map(\n            paint => <SchemeSwatch paint={paint} scheme={scheme} schemeChange={schemeChange}/>\n        )\n       :\n       null\n    ;\n    return(\n        <div className=\"flex column w-50percent\">\n            <h2>Your Scheme</h2>\n            {schemeView}\n        </div>\n    );\n}\n\nexport default ColorSchemeView;","function complementCalculator(color){\n    let complement = [0, 0, 0]\n\n    for (let i = 0; i < color.length; i++) {\n        const element = color[i];\n        complement[i] = 255 - element\n    }\n    return complement\n}\n\nfunction complementLocator(color, colorList){\n    const trueComplement = complementCalculator(color.rgba.slice(0, 3))\n    let closestComplement\n    let leastDelta = 765\n\n    for (let i = 0; i < colorList.length; i++){\n        const paint = colorList[i]\n        const rgb = paint.rgba.slice(0, 3)\n        let delta = 0\n\n        for (let i = 0; i < rgb.length; i++) {\n            const element = rgb[i];\n            delta += Math.abs(trueComplement[i] - element)\n        }\n        if (delta < leastDelta){\n            leastDelta = delta\n            closestComplement = paint\n        }\n    }\n    return closestComplement\n}\n\nexport default complementLocator","import React from 'react'\nimport Select from 'react-select'\nimport paints from \"../paints.json\"\nimport complementCalculator from \"../functions/ComplementaryColors\"\n\n\n\n\nconst ColorDropdown = ({scheme, schemeChange}) => {\n    const list = paints.map(\n        paint => {\n            const name = paint.name\n            const rgbaString = `rgba(${paint.rgba.join(\",\")})`\n\n            const dot = <div style= {{\n                background: rgbaString,\n                border: \"1px solid black\",\n                height: \"15px\",\n                width: \"15px\",\n                borderRadius: \"15px\",\n                marginLeft: \"10px\"\n                }}\n            />\n            return({\n                \"label\": \n                    <div className=\"flex\">\n                        <span>{name}</span>\n                        {dot}\n                    </div>,\n                \"value\": {...paint, complement: complementCalculator(paint, paints) }\n            })\n        }\n    )\n\n    const handleChange = (selected) => {\n        const change = selected ? selected.map(selection => selection.value) : []\n        schemeChange(change)\n    }\n\n    return(\n        <Select \n            isMulti\n            options = {list}\n            closeMenuOnSelect = {false}\n            onChange = {handleChange}\n        />\n    )\n}\n\nexport default ColorDropdown","import React, {useState} from 'react';\n// import PaintItem from \"./PaintItem\"\nimport ColorSchemeView from \"./ColorSchemeView\"\n// import complementCalculator from \"../functions/ComplementaryColors\"\nimport ColorDropdown from \"./ColorDropdown\"\n\nconst ColorList = () => {\n    let [scheme, schemeChange] = useState([]);\n\n    // const options =\n    // paints.map(\n    //     paint => \n    //     <PaintItem \n    //     scheme = {scheme} \n    //     schemeChange = {schemeChange}\n    //     paint = {{...paint, complement: complementCalculator(paint, paints)}}\n    //     />\n    // )\n\n\n\n    return(\n        <div className=\"flex justify-center space-between w-80percent margin-default\">\n            <div className=\"flex column w-50percent\">\n                <h2>Army Painter Colors</h2>\n                <ColorDropdown scheme={scheme} schemeChange={schemeChange}/>\n                {/* {options} */}\n            </div>\n            <ColorSchemeView scheme = {scheme} schemeChange={schemeChange}/>\n      </div>\n    )\n}\n\nexport default ColorList","import React from \"react\"\nimport ColorList from \"./ColorList\"\n\nconst Interface = () => {\n    // let [scheme, schemeChange] = useState([]);\n    // const props = {\n    //     \"scheme\" : scheme,\n    //     \"schemeChange\" : schemeChange\n    // };\n\n    return(\n        <>\n        <ColorList className=\"w-80percent\"/>\n        {/* {ColorSchemeView(props)} */}\n        </>\n    );\n};\n\nexport default Interface","import React from 'react';\nimport './App.css';\nimport Interface from './components/Interface'\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n        <h1>\n          Welcome to color-schemer\n        </h1>\n      <Interface/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}